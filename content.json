[{"title":"React概述","date":"2017-12-21T08:02:34.000Z","path":"2017/12/21/First-Head-React/","content":"<hr>\n<h1 id=\"JavaScript-library-JS工具库\"><a href=\"#JavaScript-library-JS工具库\" class=\"headerlink\" title=\"JavaScript library(JS工具库)\"></a>JavaScript library(JS工具库)</h1><blockquote>\n<p>React是利用JS来构建UI界面的工具库。</p>\n</blockquote>\n<h2 id=\"Declarative\"><a href=\"#Declarative\" class=\"headerlink\" title=\"Declarative\"></a>Declarative</h2><blockquote>\n<p>Declarative Programming :也就是业界经常说的声明式编程。声明式编程的定义：如果一个程序只是描述了某事而不是如何生成，那么就是表述性的。例如HTML是表述性的，因为只是描述了网页中含有了什么，而不是如何在一个计算机屏幕上实际显示。</p>\n</blockquote>\n<p>下面的例子是用React写的实例代码，可以看到对于React来构建页面其实是和HTML构建页面是一样的，只是单纯的来堆积页面中用的Element。只是针对于React来说，Element创建之后，是被挂载在Virtual DOM上的，在之后的某一个时段才会被真正挂载在真实DOM上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">     <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleChange(event) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.state.value);</div><div class=\"line\">    event.preventDefault();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</div><div class=\"line\">        &lt;label&gt;</div><div class=\"line\">          Name:</div><div class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</div><div class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Component-Based\"><a href=\"#Component-Based\" class=\"headerlink\" title=\"Component-Based\"></a>Component-Based</h2><p>可以这样认为用React来构建UI界面的时候，类似于搭<em>积木</em>，而这些<em>积木</em>从React角度来将，就是所谓的<strong>组件</strong>。<br>可以这样说React页面都是用组件来堆积起来的。这样做的好处就是实现组件的<strong>共用</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//CommonA.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                我是一个萌萌哒的汉子！</div><div class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">        )</span></div><div class=\"line\"><span class=\"regexp\">    &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/CommonB.js</span></div><div class=\"line\"><span class=\"regexp\">export default class CommonB extends React.Component&#123;</span></div><div class=\"line\"><span class=\"regexp\">    constructor(props,context)&#123;</span></div><div class=\"line\"><span class=\"regexp\">        super(props,context)</span></div><div class=\"line\"><span class=\"regexp\">    &#125;</span></div><div class=\"line\"><span class=\"regexp\">    render()&#123;</span></div><div class=\"line\"><span class=\"regexp\">        return(</span></div><div class=\"line\"><span class=\"regexp\">            &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                我是另一个汉子！</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//BusinessModuleA.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> CommonA <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> CommonB <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessModuleA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonB/&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                    &lt;CommonB/</span>&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Learn-Once-Write-Anywhere\"><a href=\"#Learn-Once-Write-Anywhere\" class=\"headerlink\" title=\"Learn Once, Write Anywhere\"></a>Learn Once, Write Anywhere</h2><p>利用React开发页面还有一个好处就是，无论你现在正在使用什么技术栈，你都可以随时引入 React 开发新特性。<br>例如，你现在用原生的HTML进行页面的构建，现在想在某一个页面或者页面的一部分使用React。React能够无缝接入。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"reactModule.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        我是用原生写的Element哦！</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"extendElement\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- This element's contents will be replaced with your component. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//reactModule.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> CommonA <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> CommonB <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessModuleA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonB/&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                    &lt;CommonB/</span>&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;BusinessModuleA /&gt;,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'extendElement'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>如上代码所示，就将React构建的页面融合到原有项目中。</p>\n","comments":true,"categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"初识JS","date":"2017-12-20T07:13:01.000Z","path":"2017/12/20/First-Head-JS/","content":"<hr>\n<h1 id=\"JavaScrpit的三大部分\"><a href=\"#JavaScrpit的三大部分\" class=\"headerlink\" title=\"JavaScrpit的三大部分\"></a>JavaScrpit的三大部分</h1><p>需要特别注意的是JS≠ECMAScript<br>这里就需要明确的讨论一下JS的组成部分了。<br>JS=ECMAScript(核心)+DOM(文档对象模型)+BOM(浏览器对象模型)</p>\n<h2 id=\"ECMAScript-JS核心\"><a href=\"#ECMAScript-JS核心\" class=\"headerlink\" title=\"ECMAScript(JS核心)\"></a>ECMAScript(JS核心)</h2><p>ECMAScript规定或者说是定义了如下内容</p>\n<ul>\n<li>语法</li>\n<li>类型</li>\n<li>语句</li>\n<li>关键字</li>\n<li>保留字</li>\n<li>操作符</li>\n<li>对象</li>\n</ul>\n<p><em>这里需要明确一点</em><br>ECMAScript-262定义的ECMAScript和Web浏览器没有任何依赖关系，ECMAScript并不包含输入、输出定义。我们所说的Web浏览器只是ECMAScript实现的<strong>宿主环境</strong>之一。</p>\n<blockquote>\n<p>宿主环境&gt;不仅提供基本的ECMAScript的实现，同时也会提供ECMAScript的扩展，以便语言和宿主环境进行对接及交互。就针对Web浏览器而言，DOM利用ECMAScript所提供的核心类型和语法提供更多的功能，以便实现<strong>针对</strong>特定宿主环境的操作。</p>\n</blockquote>\n<h2 id=\"DOM-文档对象类型\"><a href=\"#DOM-文档对象类型\" class=\"headerlink\" title=\"DOM(文档对象类型)\"></a>DOM(文档对象类型)</h2><blockquote>\n<p>DOM&gt;是针对HTML和XML文档的一个API。DOM将整个页面<em>映射</em>一个层次化的<strong>节点树</strong>，允许开发人员对页面进行CURD。</p>\n</blockquote>\n<h3 id=\"DOM级别\"><a href=\"#DOM级别\" class=\"headerlink\" title=\"DOM级别\"></a>DOM级别</h3><p>由于浏览器的发展，对DOM也不断的进行扩展，所以在不同的阶段，产生向上兼容的DOM版本。</p>\n<h4 id=\"DOM1级\"><a href=\"#DOM1级\" class=\"headerlink\" title=\"DOM1级\"></a>DOM1级</h4><p>DOM1级由两部分构成</p>\n<ol>\n<li><p>DOM Core(DOM 核心)</p>\n<blockquote>\n<p>DOM Core &gt;规定如何<strong>映射</strong>基于XML的文档机构，以便简化对文档中<em>任意</em>部分的访问和操作。</p>\n</blockquote>\n</li>\n<li><p>DOM HTML</p>\n<blockquote>\n<p>DOM HTML &gt; 在DOM Core的基础上加以<strong>扩展</strong>，添加了针对HTML的对象和方法。</p>\n</blockquote>\n</li>\n</ol>\n<p>DOM1目标主要是映射文档的结构。</p>\n<h4 id=\"DOM2级\"><a href=\"#DOM2级\" class=\"headerlink\" title=\"DOM2级\"></a>DOM2级</h4><p>DOM2级在原来DOM1级的基础上又扩充了鼠标和用户界面事件、范围、迭代DOM文档的方法等模块。同时通过<strong>对象接口</strong>增加了对CSS的支持。<br>DOM2引入下列新模块</p>\n<ol>\n<li>DOM Views(DOM视图) :定义了跟踪不同文档视图的接口；</li>\n<li>DOM Event(DOM事件) :定义了事件和事件处理的接口；</li>\n<li>DOM Style(DOM样式) ：定义了基于CSS为元素应用样式的接口；</li>\n<li>DOM Traversal and Range(DOM遍历和范围)：定义了遍历和操作文档树的接口；</li>\n</ol>\n<h4 id=\"DOM3级\"><a href=\"#DOM3级\" class=\"headerlink\" title=\"DOM3级\"></a>DOM3级</h4><p>DOM3级引入下列新模块</p>\n<ol>\n<li>DOM Load and Save(DOM加载和保存):以统一方式加载和保存文档的方法；</li>\n<li>DOM Validation(DOM验证):验证文档的方法</li>\n</ol>\n<h2 id=\"BOM-浏览器对象模型\"><a href=\"#BOM-浏览器对象模型\" class=\"headerlink\" title=\"BOM(浏览器对象模型)\"></a>BOM(浏览器对象模型)</h2><p>开发人员使用BOM可以控制浏览器显示的页面以外的部分。<br><em>从根本上讲，BOM只处理浏览器窗口和框架。</em>但是开发人员也把所有针对浏览器的JS扩展算作BOM的一部分。</p>\n<ul>\n<li>弹窗新浏览器窗口的功能；</li>\n<li>移动、缩放和关闭浏览器窗功能；</li>\n<li>提供浏览器详细信息的navigator对象；</li>\n<li>提供浏览器所加载页面的详细信息的location对象；</li>\n<li>提供用户显示器分辨率详细信息的screen对象；</li>\n<li>对cookies的支持</li>\n<li>像XMLHttpRequest自定义对象。</li>\n</ul>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实可以用一道菜来形容JS中ECMAScript、DOM、BOM的关系</p>\n<blockquote>\n<p>宫保鸡丁(web page)的做法<br>预备材料：鸡肉(html or xml)、佐料(css)<br>主厨：JS<br>主厨(JS)利用手中的刀(DOM){该刀不仅仅切鸡肉}将鸡肉切成块状(web page object/API),利用自己娴熟的技术(ECMAScirpt)<br>针对不同的种类的鸡块(API)配合佐料(css)和火候(BOM)产生的温度(browser object/API{XMLHTTPRequest对象，location对象})烹饪出可口的page。</p>\n</blockquote>\n","comments":false,"categories":[{"name":"js","slug":"js","permalink":"http://yoursite.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]}]