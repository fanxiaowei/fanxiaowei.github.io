[{"title":"let 和 const","date":"2017-12-21T14:37:53.000Z","path":"2017/12/21/First-Head-ES6/","content":"<hr>\n<h1 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>ES6新增了用于声明变量的let命令，用法类似于var，但是用let声明的变量只能在let所在的<strong>代码块</strong>内有效。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"string\">'paramA'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">'paramB'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">a <span class=\"comment\">// ReferenceError :a is not defined</span></div><div class=\"line\">b <span class=\"comment\">// paramB</span></div></pre></td></tr></table></figure></p>\n<p>这里有一个很有意思的bug，需要着重讨论一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    a[i]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<p>这个输出结果很意外，很多人以为会是输出6，但是在浏览器的控制台的结果却是10。很诧异。<br>我们来扮演一下浏览器的处理过程。<br>首先我们需要确定一个概念就是用var定义的变量会发生<strong>变量提升</strong>，也就是说在for循环中定义的i经过变量提升，提示到代码的最前面，等同于在整个for循环中仅仅存在一份i变量。</p>\n<ol>\n<li>每次for处理，唯一的i值会发生相应的变化。</li>\n<li>在for结束之后，i的值已经变为10</li>\n<li>调用a<a href=\"\">6</a>的时候，其实是在堆内存中找出对应的console.log(i),此时在该匿名函数查找栈内存中的i变量，发现i的值是10，所以没有商量</li>\n<li>最后的输出结果为10</li>\n</ol>\n<p>如果在for中采用let来定义<strong>游标</strong>(循环变量)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    a[i]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></div></pre></td></tr></table></figure></p>\n<p>此时的结果就是6了。<br>其实不管是在for中用var或者let定义，内部都涉及到闭包。<br>这里以let的来解析一下。<br>首先需要明确的一点，console.log是ECMAScript中的内置函数。</p>\n<ol>\n<li>for处理，let定义的<strong>游标</strong>也是会发生变化，但是需要记住，用let定义的变量只在对应的<strong>代码块</strong>中有效，所以每一次的let都是<strong>新的</strong>。</li>\n<li>for结束</li>\n<li>调用a<a href=\"\">6</a>,由于闭包存在作用域链，在console.log(i)被调用后，匿名函数会在该函数对应作用域链中查找栈内存中的对应的i变量。由1所知，i在每一次循环中都是<strong>新的</strong>。</li>\n<li>输出结果是6</li>\n</ol>\n<h2 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h2><p>let不存在变量提升，所以，<strong>变量一定要在声明后使用</strong><br>原来使用var定义变量的时候，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(paramA);</div><div class=\"line\"><span class=\"keyword\">var</span> paramA = <span class=\"string\">'hehe'</span>;</div></pre></td></tr></table></figure></p>\n<p>上面代码是能够运行成功的，之所以能够通过编译。是由于在编译器对上述代码会在编译阶段就行调整<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> paramA;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(paramA);</div><div class=\"line\">paramA = <span class=\"string\">'hehe'</span>;</div></pre></td></tr></table></figure></p>\n<p>但是现在用let定义的变量不会发生<strong>变量提升</strong>所以下面的代码就会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(paramB); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> paramB = <span class=\"string\">'haha'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"暂时性死区-temporal-dead-zone-TDZ\"><a href=\"#暂时性死区-temporal-dead-zone-TDZ\" class=\"headerlink\" title=\"暂时性死区(temporal dead zone TDZ)\"></a>暂时性死区(temporal dead zone TDZ)</h2><p>只要<strong>块级作用域</strong>内存在let命令，它所声明的变量就<em>绑定</em>这个区域，不再受外部影响。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(temp);<span class=\"comment\">// ReferenceError</span></div><div class=\"line\">    temp = <span class=\"string\">'hehe'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6明确规定，如果在区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成<strong>封闭作用域</strong>，只要在声明之前使用这些变量，就会报错。</p>\n</blockquote>\n<p><strong>总之，TDZ的本质就是，只要一进入当前作用域，所要使用的变量就已存在，但是不可以获取，只有等到声明变量的那行代码出现，才可以获取和使用该变量</strong></p>\n<h2 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h2><p>let不允许在相同作用域内重复声明同一变量。(这个是规定)<br>这个是为了区分ES5中用var定义变量，用var定义的变量可以重复定义，变量最后的值，是以最后定义的为准</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> a =<span class=\"string\">'b'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">// b</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个规则中，有一点需要注意：<br><strong>不能在函数内部重新声明参数</strong></p>\n<h1 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h1><p>ES5只有<strong>全局作用域</strong>和<strong>函数作用域</strong>，没有块级作用。<br>这里就会产生很多意外的bug。</p>\n<ul>\n<li>内层变量覆盖外层变量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> tmp = <span class=\"string\">\"hehe\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f() <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>由于在函数作用域中tmp发生了变量提示，在<strong>编译阶段</strong>提升到函数作用域的最前面，然后log(tmp)。由于tmp被提升到函数作用域的最前面，所以在log的时候，此时tmp的值是被提升的值，而不是全局作用域中定义的变量。</p>\n<ul>\n<li>用来技术的循环变量泄露为全局变量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; s.length;i++)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(i)<span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>然而ES6为了避免这些不必要的bug，新增了块级作用域</p>\n<h1 id=\"const-命令\"><a href=\"#const-命令\" class=\"headerlink\" title=\"const 命令\"></a>const 命令</h1><p>const 用于声明<strong>常量</strong>。一旦声明，其值就不能改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14</span>;</div><div class=\"line\">PI <span class=\"comment\">//3.14</span></div><div class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">//TypeError :'PI' is read-only</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>const声明的常量不得改变值，也就是说，const一旦声明常量，就必须<strong>立即初始化</strong>。const 声明的变量也不会发生变量提升，同时存在TDZ.</p>\n</blockquote>\n<hr>\n<p>对于符合类型的变量，例如对象，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变。</p>\n<hr>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实ES6之所以会新增let、const命令主要是为了避免ES5使用var定义变量的各种稀奇古怪的问题。</p>\n","comments":true,"categories":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/categories/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"初识CSS","date":"2017-12-21T14:02:09.000Z","path":"2017/12/21/First-Head-CSS/","content":"<hr>\n<h1 id=\"What-is-CSS\"><a href=\"#What-is-CSS\" class=\"headerlink\" title=\"What is CSS\"></a>What is CSS</h1><ul>\n<li>CSS是Cascading Style Sheets(层叠样式表的简称)。</li>\n<li>CSS主要是为了描述HTML Element如何在Web页面展示。</li>\n<li>CSS节省了很多工作，它能够在一个地方来控制多个页面的布局格式。</li>\n</ul>\n<h1 id=\"Why-Use-CSS\"><a href=\"#Why-Use-CSS\" class=\"headerlink\" title=\"Why Use CSS\"></a>Why Use CSS</h1><p>CSS是为了网页定义布局、样式使网页能够适配不同设备和屏幕大小。</p>\n<h1 id=\"CSS解决的痛点\"><a href=\"#CSS解决的痛点\" class=\"headerlink\" title=\"CSS解决的痛点\"></a>CSS解决的痛点</h1><p>对于HTML来说，利用标签(tag)来对网页进行格式化，不是它的本职工作。HTML是用来描绘页面布局的，是Web page的骨架。而真正对网页进行format的事就交个CSS了。</p>\n<blockquote>\n<p>可以这样认为HTML构建了Web page的<strong>骨架</strong>，CSS对骨架进行<strong>修饰</strong>。</p>\n</blockquote>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>CSS其实就是对网页进行粉饰的<strong>粉刷匠</strong>。</p>\n","comments":true,"categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"React概述","date":"2017-12-21T08:02:34.000Z","path":"2017/12/21/First-Head-React/","content":"<hr>\n<h1 id=\"JavaScript-library-JS工具库\"><a href=\"#JavaScript-library-JS工具库\" class=\"headerlink\" title=\"JavaScript library(JS工具库)\"></a>JavaScript library(JS工具库)</h1><blockquote>\n<p>React是利用JS来构建UI界面的工具库。</p>\n</blockquote>\n<h2 id=\"Declarative\"><a href=\"#Declarative\" class=\"headerlink\" title=\"Declarative\"></a>Declarative</h2><blockquote>\n<p>Declarative Programming :也就是业界经常说的声明式编程。声明式编程的定义：如果一个程序只是描述了某事而不是如何生成，那么就是表述性的。例如HTML是表述性的，因为只是描述了网页中含有了什么，而不是如何在一个计算机屏幕上实际显示。</p>\n</blockquote>\n<p>下面的例子是用React写的实例代码，可以看到对于React来构建页面其实是和HTML构建页面是一样的，只是单纯的来堆积页面中用的Element。只是针对于React来说，Element创建之后，是被挂载在Virtual DOM上的，在之后的某一个时段才会被真正挂载在真实DOM上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">     <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleChange(event) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.state.value);</div><div class=\"line\">    event.preventDefault();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</div><div class=\"line\">        &lt;label&gt;</div><div class=\"line\">          Name:</div><div class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</div><div class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Component-Based\"><a href=\"#Component-Based\" class=\"headerlink\" title=\"Component-Based\"></a>Component-Based</h2><p>可以这样认为用React来构建UI界面的时候，类似于搭<em>积木</em>，而这些<em>积木</em>从React角度来将，就是所谓的<strong>组件</strong>。<br>可以这样说React页面都是用组件来堆积起来的。这样做的好处就是实现组件的<strong>共用</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//CommonA.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                我是一个萌萌哒的汉子！</div><div class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">        )</span></div><div class=\"line\"><span class=\"regexp\">    &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/CommonB.js</span></div><div class=\"line\"><span class=\"regexp\">export default class CommonB extends React.Component&#123;</span></div><div class=\"line\"><span class=\"regexp\">    constructor(props,context)&#123;</span></div><div class=\"line\"><span class=\"regexp\">        super(props,context)</span></div><div class=\"line\"><span class=\"regexp\">    &#125;</span></div><div class=\"line\"><span class=\"regexp\">    render()&#123;</span></div><div class=\"line\"><span class=\"regexp\">        return(</span></div><div class=\"line\"><span class=\"regexp\">            &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                我是另一个汉子！</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//BusinessModuleA.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> CommonA <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> CommonB <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessModuleA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonB/&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                    &lt;CommonB/</span>&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Learn-Once-Write-Anywhere\"><a href=\"#Learn-Once-Write-Anywhere\" class=\"headerlink\" title=\"Learn Once, Write Anywhere\"></a>Learn Once, Write Anywhere</h2><p>利用React开发页面还有一个好处就是，无论你现在正在使用什么技术栈，你都可以随时引入 React 开发新特性。<br>例如，你现在用原生的HTML进行页面的构建，现在想在某一个页面或者页面的一部分使用React。React能够无缝接入。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"reactModule.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        我是用原生写的Element哦！</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"extendElement\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- This element's contents will be replaced with your component. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//reactModule.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> CommonA <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> CommonB <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessModuleA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonB/&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                    &lt;CommonB/</span>&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;BusinessModuleA /&gt;,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'extendElement'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>如上代码所示，就将React构建的页面融合到原有项目中。</p>\n","comments":true,"categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"初识JS","date":"2017-12-20T07:13:01.000Z","path":"2017/12/20/First-Head-JS/","content":"<hr>\n<h1 id=\"JavaScrpit的三大部分\"><a href=\"#JavaScrpit的三大部分\" class=\"headerlink\" title=\"JavaScrpit的三大部分\"></a>JavaScrpit的三大部分</h1><p>需要特别注意的是JS≠ECMAScript<br>这里就需要明确的讨论一下JS的组成部分了。<br>JS=ECMAScript(核心)+DOM(文档对象模型)+BOM(浏览器对象模型)</p>\n<h2 id=\"ECMAScript-JS核心\"><a href=\"#ECMAScript-JS核心\" class=\"headerlink\" title=\"ECMAScript(JS核心)\"></a>ECMAScript(JS核心)</h2><p>ECMAScript规定或者说是定义了如下内容</p>\n<ul>\n<li>语法</li>\n<li>类型</li>\n<li>语句</li>\n<li>关键字</li>\n<li>保留字</li>\n<li>操作符</li>\n<li>对象</li>\n</ul>\n<p><em>这里需要明确一点</em><br>ECMAScript-262定义的ECMAScript和Web浏览器没有任何依赖关系，ECMAScript并不包含输入、输出定义。我们所说的Web浏览器只是ECMAScript实现的<strong>宿主环境</strong>之一。</p>\n<blockquote>\n<p>宿主环境&gt;不仅提供基本的ECMAScript的实现，同时也会提供ECMAScript的扩展，以便语言和宿主环境进行对接及交互。就针对Web浏览器而言，DOM利用ECMAScript所提供的核心类型和语法提供更多的功能，以便实现<strong>针对</strong>特定宿主环境的操作。</p>\n</blockquote>\n<h2 id=\"DOM-文档对象类型\"><a href=\"#DOM-文档对象类型\" class=\"headerlink\" title=\"DOM(文档对象类型)\"></a>DOM(文档对象类型)</h2><blockquote>\n<p>DOM&gt;是针对HTML和XML文档的一个API。DOM将整个页面<em>映射</em>一个层次化的<strong>节点树</strong>，允许开发人员对页面进行CURD。</p>\n</blockquote>\n<h3 id=\"DOM级别\"><a href=\"#DOM级别\" class=\"headerlink\" title=\"DOM级别\"></a>DOM级别</h3><p>由于浏览器的发展，对DOM也不断的进行扩展，所以在不同的阶段，产生向上兼容的DOM版本。</p>\n<h4 id=\"DOM1级\"><a href=\"#DOM1级\" class=\"headerlink\" title=\"DOM1级\"></a>DOM1级</h4><p>DOM1级由两部分构成</p>\n<ol>\n<li><p>DOM Core(DOM 核心)</p>\n<blockquote>\n<p>DOM Core &gt;规定如何<strong>映射</strong>基于XML的文档机构，以便简化对文档中<em>任意</em>部分的访问和操作。</p>\n</blockquote>\n</li>\n<li><p>DOM HTML</p>\n<blockquote>\n<p>DOM HTML &gt; 在DOM Core的基础上加以<strong>扩展</strong>，添加了针对HTML的对象和方法。</p>\n</blockquote>\n</li>\n</ol>\n<p>DOM1目标主要是映射文档的结构。</p>\n<h4 id=\"DOM2级\"><a href=\"#DOM2级\" class=\"headerlink\" title=\"DOM2级\"></a>DOM2级</h4><p>DOM2级在原来DOM1级的基础上又扩充了鼠标和用户界面事件、范围、迭代DOM文档的方法等模块。同时通过<strong>对象接口</strong>增加了对CSS的支持。<br>DOM2引入下列新模块</p>\n<ol>\n<li>DOM Views(DOM视图) :定义了跟踪不同文档视图的接口；</li>\n<li>DOM Event(DOM事件) :定义了事件和事件处理的接口；</li>\n<li>DOM Style(DOM样式) ：定义了基于CSS为元素应用样式的接口；</li>\n<li>DOM Traversal and Range(DOM遍历和范围)：定义了遍历和操作文档树的接口；</li>\n</ol>\n<h4 id=\"DOM3级\"><a href=\"#DOM3级\" class=\"headerlink\" title=\"DOM3级\"></a>DOM3级</h4><p>DOM3级引入下列新模块</p>\n<ol>\n<li>DOM Load and Save(DOM加载和保存):以统一方式加载和保存文档的方法；</li>\n<li>DOM Validation(DOM验证):验证文档的方法</li>\n</ol>\n<h2 id=\"BOM-浏览器对象模型\"><a href=\"#BOM-浏览器对象模型\" class=\"headerlink\" title=\"BOM(浏览器对象模型)\"></a>BOM(浏览器对象模型)</h2><p>开发人员使用BOM可以控制浏览器显示的页面以外的部分。<br><em>从根本上讲，BOM只处理浏览器窗口和框架。</em>但是开发人员也把所有针对浏览器的JS扩展算作BOM的一部分。</p>\n<ul>\n<li>弹窗新浏览器窗口的功能；</li>\n<li>移动、缩放和关闭浏览器窗功能；</li>\n<li>提供浏览器详细信息的navigator对象；</li>\n<li>提供浏览器所加载页面的详细信息的location对象；</li>\n<li>提供用户显示器分辨率详细信息的screen对象；</li>\n<li>对cookies的支持</li>\n<li>像XMLHttpRequest自定义对象。</li>\n</ul>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实可以用一道菜来形容JS中ECMAScript、DOM、BOM的关系</p>\n<blockquote>\n<p>宫保鸡丁(web page)的做法<br>预备材料：鸡肉(html or xml)、佐料(css)<br>主厨：JS<br>主厨(JS)利用手中的刀(DOM){该刀不仅仅切鸡肉}将鸡肉切成块状(web page object/API),利用自己娴熟的技术(ECMAScirpt)<br>针对不同的种类的鸡块(API)配合佐料(css)和火候(BOM)产生的温度(browser object/API{XMLHTTPRequest对象，location对象})烹饪出可口的page。</p>\n</blockquote>\n","comments":false,"categories":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/categories/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]}]