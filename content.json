[{"title":"变量的解构赋值","date":"2017-12-26T08:19:07.000Z","path":"2017/12/26/ES6-Destructuring/","content":"<hr>\n<h1 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>ES6 允许按照一定<strong>模式</strong>，从<em>数组</em>和<em>对象</em>中提<strong>取</strong>值，对变量进行赋值，这被称为解构（Destructuring）。<br>以前，对一个变量赋值只能<strong>直接赋值</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a = array[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = array[<span class=\"number\">1</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> c = array[<span class=\"number\">2</span>];</div></pre></td></tr></table></figure></p>\n<p>ES6利用Destructuring对变量赋值就可以减少很多冗余代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = array;</div></pre></td></tr></table></figure></p>\n<p>上述代码表示，从数组中<strong>提取</strong>，按照对应的<strong>位置</strong>，对变量进行赋值。</p>\n<blockquote>\n<p>本质上，这种写法属于<strong>“模式匹配”</strong>，只要等号两边的<em>模式</em>相同，左边的变量就会被赋予<em>对应</em>的值</p>\n</blockquote>\n<p>这点可以对比一下RegExp的<em>模式匹配</em></p>\n<blockquote>\n<p>正则表达式（regular expression）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用作按照“给定模式”匹配文本的工具。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先从一个简单的例子说起</span></div><div class=\"line\">/cat/.test(<span class=\"string\">'cats and dogs'</span>)<span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"comment\">//该示例中**模式**(/cat/)来检查变量'cats and dogs'中是否存在能够匹配模式的文本，示例中String中的cat能够匹配模式/cat/，test的结果为true</span></div></pre></td></tr></table></figure>\n<p>下面是解构赋值的常规示例<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//该示例中，模式匹配是根据数据的*等级*，foo对应需要处理数组的最外层，以此类推，bar为第二层</span></div><div class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</div><div class=\"line\">foo <span class=\"comment\">// 1</span></div><div class=\"line\">bar <span class=\"comment\">// 2</span></div><div class=\"line\">baz <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"comment\">//该示例中变量中只有third是存在的，所以只对third进行对应的赋值</span></div><div class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</div><div class=\"line\">third <span class=\"comment\">// \"baz\"</span></div><div class=\"line\"><span class=\"comment\">//道理同上</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"comment\">//note:在解构赋值中...代表的是，将待处理数组中剩余的变量存放到一个数组中。</span></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\">head <span class=\"comment\">// 1</span></div><div class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></div><div class=\"line\"><span class=\"comment\">//note：这里需要注意两点1:对于没有匹配成功的变量，值为undefined </span></div><div class=\"line\"><span class=\"comment\">//2：在待处理数组中没有剩余的值进行匹配，同时在解构中使用了...之后，...之后的变量为[]</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</div><div class=\"line\">x <span class=\"comment\">// \"a\"</span></div><div class=\"line\">y <span class=\"comment\">// undefined</span></div><div class=\"line\">z <span class=\"comment\">// []</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"不完全解构\"><a href=\"#不完全解构\" class=\"headerlink\" title=\"不完全解构\"></a>不完全解构</h2><blockquote>\n<p>不完全解构：等号左边的模式，只匹配<strong>一部分</strong>的等号右边的数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</div><div class=\"line\">a <span class=\"comment\">// 1</span></div><div class=\"line\">b <span class=\"comment\">// 2</span></div><div class=\"line\">d <span class=\"comment\">// 4</span></div></pre></td></tr></table></figure>\n<h2 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><p>解构赋值允许指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</div><div class=\"line\">foo <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>]; <span class=\"comment\">// x='a', y='b'</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x='a', y='b'</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6 内部使用<strong>严格相等</strong>运算符（===），判断一个位置是否有值。所以，如果一个数组成员<em>不严格等于**</em>undefined<strong>，默认值是不会生效的。<br>默认值可以引用解构赋值的其他变量，但该变量必须</strong>已经声明**。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [];     <span class=\"comment\">// x=1; y=1</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>];    <span class=\"comment\">// x=2; y=2</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=1; y=2</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">// ReferenceError </span></div><div class=\"line\"><span class=\"keyword\">var</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">//x= undefined; y= 1;</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>对于上面的示例需要特别注意两点</p>\n<ol>\n<li>示例中前三个例子原理都是一样的，按照浏览器处理方式，先用let 声明了<strong>x</strong>，然后再声明<strong>y</strong>，然后根据解构规则，在=右边严格等于undefined默认值值生效，其余都是按照匹配模式处理。</li>\n<li>对于第四个例子中，在进行编译的时出错，其实这和解构没有任何关系，在介绍let的时候，let 定义的变量存在TDZ(暂时性死区)，由1解析可知，x先于y定义，但是在对x处理默认值的时候，先于y定义调用了y。所以会报错。</li>\n</ol>\n<h1 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h1><p><strong>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//变量和对象中属性次序不同</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></div><div class=\"line\"><span class=\"comment\">//变量没有匹配到对象中的变量名，所以没有匹配成功</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<p>如果变量名与属性名不一致，必须在<strong>模式</strong>中特意匹配对象的<em>格式</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//在模式中变量为baz,但是在匹配对象中没有baz这个属性，所以需要在模式中特意构造出对象中对应的属性</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">'hello'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'world'</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</div><div class=\"line\">f <span class=\"comment\">// 'hello'</span></div><div class=\"line\">l <span class=\"comment\">// 'world'</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</div><div class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></div><div class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"默认值-1\"><a href=\"#默认值-1\" class=\"headerlink\" title=\"默认值\"></a>默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">x <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\">x <span class=\"comment\">// 1</span></div><div class=\"line\">y <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</div><div class=\"line\">y <span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</div><div class=\"line\">y <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">'Something went wrong'</span> &#125; = &#123;&#125;;</div><div class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></div></pre></td></tr></table></figure>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span>;</div></pre></td></tr></table></figure></p>\n<h1 id=\"其他数据类型的解构赋值\"><a href=\"#其他数据类型的解构赋值\" class=\"headerlink\" title=\"其他数据类型的解构赋值\"></a>其他数据类型的解构赋值</h1><p>在这里需要明确一下，对于ES5来说，共有6中数据类型(ES6,新增了Symbol类型)</p>\n<ul>\n<li>数值（number）：整数和小数（比如1和3.14）</li>\n<li>字符串（string）：字符组成的文本（比如”Hello World”）</li>\n<li>布尔值（boolean）：true（真）和false（假）两个特定值</li>\n<li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li>\n<li>null：表示无值，即此处的值就是“无”的状态。</li>\n<li>对象（object）：各种值组成的集合</li>\n</ul>\n<p>上面讨论了针对Array(属于对象类型)、普通对象的解构赋值，但是对于解构赋值来说，也同样适用于其他的数据类型。(除了undefined/null)</p>\n<blockquote>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n</blockquote>\n<p>对于其他的数据类型的解构赋值，其实都是先将=右边的数据转换为<strong>对象</strong>,然后根据各自转为对象的一些特性进行解构处理。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//示例1</span></div><div class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</div><div class=\"line\">a <span class=\"comment\">// \"h\"</span></div><div class=\"line\">b <span class=\"comment\">// \"e\"</span></div><div class=\"line\">c <span class=\"comment\">// \"l\"</span></div><div class=\"line\">d <span class=\"comment\">// \"l\"</span></div><div class=\"line\">e <span class=\"comment\">// \"o\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</div><div class=\"line\">len <span class=\"comment\">// 5</span></div><div class=\"line\"><span class=\"comment\">//示例2</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"number\">123</span>;</div><div class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"literal\">true</span>;</div><div class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>针对示例1来说，浏览器处理过程如下</p>\n<ol>\n<li>let source = new Object(‘hello’);//soucre:{0:”h”,1:”e”,2:”l”,3:”l”,4:”o”,length:5}</li>\n<li>const [a,b,c,d,e] = source;</li>\n</ol>\n<h1 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h1><p>ES6的出现就是为了解决ES5的一些痛点，或者是减少代码的冗余量。</p>\n<h2 id=\"交换变量的值\"><a href=\"#交换变量的值\" class=\"headerlink\" title=\"交换变量的值\"></a>交换变量的值</h2><p>先看一下ES5进行变量值的交互(引用第三个变量的方式就不描述了，太LOW了)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ES5两个变量就行交互</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">99</span>;</div><div class=\"line\">a ^= b, b ^= a, a ^= b;</div><div class=\"line\">a <span class=\"comment\">// 99</span></div><div class=\"line\">b <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<p>相比较，采用解构赋值简直简单到死。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">[x, y] = [y, x];</div></pre></td></tr></table></figure></p>\n<h2 id=\"从函数返回多个值\"><a href=\"#从函数返回多个值\" class=\"headerlink\" title=\"从函数返回多个值\"></a>从函数返回多个值</h2><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 返回一个数组</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</div><div class=\"line\"><span class=\"comment\">// 返回一个对象</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    foo: <span class=\"number\">1</span>,</div><div class=\"line\">    bar: <span class=\"number\">2</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数参数的定义\"><a href=\"#函数参数的定义\" class=\"headerlink\" title=\"函数参数的定义\"></a>函数参数的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</div><div class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</div><div class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"提取-JSON-数据\"><a href=\"#提取-JSON-数据\" class=\"headerlink\" title=\"提取 JSON 数据\"></a>提取 JSON 数据</h2><p>解构赋值对提取 JSON 对象中的数据，尤其有用<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</div><div class=\"line\">  id: <span class=\"number\">42</span>,</div><div class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</div><div class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</div><div class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"函数参数的默认值\"><a href=\"#函数参数的默认值\" class=\"headerlink\" title=\"函数参数的默认值\"></a>函数参数的默认值</h2><p>指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || ‘default foo’;这样的语句。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">  async = true,</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = function (</span>) </span>&#123;&#125;,</div><div class=\"line\">  cache = <span class=\"literal\">true</span>,</div><div class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</div><div class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</div><div class=\"line\">  global = <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"comment\">// ... more config</span></div><div class=\"line\">&#125;) &#123;</div><div class=\"line\">  <span class=\"comment\">// ... do stuff</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"遍历-Map-结构\"><a href=\"#遍历-Map-结构\" class=\"headerlink\" title=\"遍历 Map 结构\"></a>遍历 Map 结构</h2><p>任何部署了 <strong>Iterator</strong> 接口的对象，都可以用<strong>for…of</strong>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</div><div class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</div><div class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// first is hello</span></div><div class=\"line\"><span class=\"comment\">// second is world</span></div></pre></td></tr></table></figure></p>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取键名</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 获取键值</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"输入模块的指定方法\"><a href=\"#输入模块的指定方法\" class=\"headerlink\" title=\"输入模块的指定方法\"></a>输入模块的指定方法</h2><p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。尤其在React进行开发的时候尤其有用。</p>\n<pre><code class=\"js\"><span class=\"keyword\">import</span> React, {Component} <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;\n<span class=\"keyword\">import</span> {connect} <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;\n</code></pre>\n","comments":true,"categories":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/categories/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"JSX解析","date":"2017-12-25T08:18:22.000Z","path":"2017/12/25/React-JSX/","content":"<hr>\n<p>在介绍JSX之前，需要回顾一下JS在处理页面事件时扮演的什么角色。<br>JS在处理页面各种事件时，无非就是利用DOM提供的API使JS有能力对HTML事件作出反应。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleButonClick</span>(<span class=\"params\">e</span>)</span>&#123;</span></div><div class=\"line\"><span class=\"javascript\">                e.innerText = <span class=\"string\">'你说的对'</span>;</span></div><div class=\"line\"><span class=\"undefined\">            &#125;</span></div><div class=\"line\"><span class=\"undefined\">        </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"handleButonClick(this)\"</span>&gt;</span>我是一个萌萌哒的汉子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>从上面的例子中看到,JS是利用DOM提供的API来对页面事件进行控制，其中Function在里面扮演着很重要的角色。<br>明白了这点，介绍JSX其实就有点简单了。<br>首先需要明确的一点就是React是JS的一个<strong>工具库</strong>。何为工具库，就是为了简化JS对页面的操作产生的。</p>\n<h1 id=\"初识JSX\"><a href=\"#初识JSX\" class=\"headerlink\" title=\"初识JSX\"></a>初识JSX</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>人家是一个JSX变量哦！<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<p>上面从JS的角度来分析，就是定义了一个常量(element)，保存着<div>人家是一个JSX变量哦！</div>。你会发现和ES5，ES6定义变量的方式，有点别扭。其实长这样的定义变量的方式，就是JSX语法。</p>\n<blockquote>\n<p>JSX：a syntax extension to JavaScript</p>\n</blockquote>\n<p>JSX其实就是对JS的语法扩展，说的更透彻一点就是对ECMAScript的语法扩展。在JSX中,就是将<strong>HTML语言直接写在JS语言中，不加任何引号</strong>。用于来<strong>描述</strong>页面长什么样子。利用HTML可以更好的描述页面的各种<em>层级结构</em>。</p>\n<h1 id=\"在JSX中嵌入表达式\"><a href=\"#在JSX中嵌入表达式\" class=\"headerlink\" title=\"在JSX中嵌入表达式\"></a>在JSX中嵌入表达式</h1><blockquote>\n<p>You can embed any JavaScript expression in JSX by wrapping it in curly braces.(你可以通过在JSX利用大括号嵌入任何JS表达式)</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> param = <span class=\"string\">\"一人我饮酒醉\"</span>;</div><div class=\"line\"><span class=\"keyword\">const</span> elemnt = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;param&#125; \"醉把佳人成双对\"<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h1 id=\"JSX也可以作为表达式使用\"><a href=\"#JSX也可以作为表达式使用\" class=\"headerlink\" title=\"JSX也可以作为表达式使用\"></a>JSX也可以作为表达式使用</h1><p>需要明确的<strong>知识点</strong>：JS是有一半的”基因”是面向对象语言，所以JS中处处是对象。<br>由于JSX是对JS的语法扩展，所以JSX也是可以作为表达式存在的。(经过特定的编译器，JSX expressions会被编译为普通函数用于调用或者是JS Object)。<br>这就意味着，你可以在if 或者for循环中使用JSX。用于将JSX赋值给一个变量，作为函数参数使用（HOC）或者作为函数的返回值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGreeting</span>(<span class=\"params\">user</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (user) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;formatName(user)&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, Stranger.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"JSX中指定属性\"><a href=\"#JSX中指定属性\" class=\"headerlink\" title=\"JSX中指定属性\"></a>JSX中指定属性</h1><ol>\n<li><p>可以使用<strong>引号</strong>(“ “)为React Element中某个<strong>属性</strong>指定一个字符串变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"abc\"</span>&gt;</span>呵呵<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>将属性值嵌入到<strong>大括号</strong>中为React Element属性赋值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> element = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;user.avatarUrl&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"JSX-Represents-Objects\"><a href=\"#JSX-Represents-Objects\" class=\"headerlink\" title=\"JSX Represents Objects\"></a>JSX Represents Objects</h1><p>上文了解到JSX是js的一个语法扩展，也就是说，没有进过转换或者编译的JSX元素，浏览器是不认识的。所以在页面的编译阶段，当遇到用JSX语法来构建的element的时候，React内部会在内部调用React.createElement()将JSX变成一个浏览器能够识别的<strong>普通对象</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//JSX构建元素</span></div><div class=\"line\"><span class=\"keyword\">const</span> element = (</div><div class=\"line\">  &lt;h1 className=<span class=\"string\">\"greeting\"</span>&gt;</div><div class=\"line\">    Hello, world!</div><div class=\"line\">  &lt;<span class=\"regexp\">/h1&gt;</span></div><div class=\"line\"><span class=\"regexp\">);</span></div><div class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/不使用JSX,直接调用createElement来构建Element</span></div><div class=\"line\"><span class=\"regexp\">const element = React.createElement(</span></div><div class=\"line\"><span class=\"regexp\">  'h1',</span></div><div class=\"line\"><span class=\"regexp\">  &#123;className: 'greeting'&#125;,</span></div><div class=\"line\"><span class=\"regexp\">  'Hello, world!'</span></div><div class=\"line\"><span class=\"regexp\">);</span></div></pre></td></tr></table></figure></p>\n<p>上面两种方式构建的Element是等价的。最后的结果都是构建了一个具有<strong>层级结构</strong>的element。<br>最后经过编译阶段，利用JSX构建的React元素会被编译成普通对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里是进过简化过的，具体的对象比这个复杂。</span></div><div class=\"line\"><span class=\"keyword\">const</span> element = &#123;</div><div class=\"line\">  type: <span class=\"string\">'h1'</span>,</div><div class=\"line\">  props: &#123;</div><div class=\"line\">    className: <span class=\"string\">'greeting'</span>,</div><div class=\"line\">    children: <span class=\"string\">'Hello, world'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实在React开发过程中完全可以抛弃JSX来进行页面的构建，利用React.createElement()来构建页面也是可以的，但是大多数人还是更愿意采用JSX。</p>\n<ol>\n<li>JSX类似于用HTML来搭建页面，<strong>所见即所得</strong></li>\n<li>JSX语法能够实现代码的高内聚低耦合</li>\n<li>使用JSX可以显示React更多的有用的错误提示</li>\n</ol>\n","comments":true,"categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"CSS-水平垂直居中常用方案","date":"2017-12-25T02:29:44.000Z","path":"2017/12/25/CSS-Horizontal/","content":"<hr>\n<p>为了实现一个元素居中有很多方法，但是有时候一些东西还是有点模棱两可的，所以在请教”大神”还有进行实际之后，进行一篇简单的居中文档。<br><strong>这里是简单的HTML文件</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//index.html</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">htm</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--这里是采用外联样式 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"extendCss.css\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Css元素居中解决方案<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">htm</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Table-Cell\"><a href=\"#Table-Cell\" class=\"headerlink\" title=\"Table-Cell\"></a>Table-Cell</h1><p>啥都不要说，直接撸<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//extendCss.css</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"comment\">/*居中代码*/</span></div><div class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: red;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现的效果：</p>\n<p><img src=\"/images/css/horizontal/table-cell.jpg\" alt=\"\"></p>\n<h2 id=\"深度了解Table-cell\"><a href=\"#深度了解Table-cell\" class=\"headerlink\" title=\"深度了解Table-cell\"></a>深度了解Table-cell</h2><p><a href=\"https://www.jianshu.com/p/700ede25d0bc\" target=\"_blank\" rel=\"external\">table-cell在布局中的使用</a></p>\n<h1 id=\"利用absolute居中\"><a href=\"#利用absolute居中\" class=\"headerlink\" title=\"利用absolute居中\"></a>利用absolute居中</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">background</span>:red;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"comment\">/***居中***/</span></div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>:center;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h2><ol>\n<li>对需要居中的父元素进行定位处理，这里采用的是relative。或者说除了static定位都可以。absolute、fixed。但是在一般的情况下，最好是将父元素利用relative进行定位。</li>\n<li>对需要<strong>居中</strong>的元素采用absolute定位，<em>这里只能是absolute</em>。这里就需要解释一下采用absolute定位的原理，<strong>生成绝对定位的元素，相对于 static 定位以外的<em>第一个祖先元素</em>进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</strong></li>\n<li>采用<strong>top/left</strong>进行元素的居中定位</li>\n<li>由于需要定位的元素有实际的content area，所以需要根据定位元素的<em>width/height</em>进行居中的<strong>微调</strong></li>\n<li>对于居中的元素的content进行本元素内容水平居中。</li>\n</ol>\n<h2 id=\"利用CSS3的transform代替margin\"><a href=\"#利用CSS3的transform代替margin\" class=\"headerlink\" title=\"利用CSS3的transform代替margin\"></a>利用CSS3的transform代替margin</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">   <span class=\"attribute\">background</span>:red;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"comment\">/***居中***/</span></div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>:center;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-50%, -50%);    <span class=\"comment\">/* 50%为自身尺寸的一半 */</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是采用CSS3的transform的兼容性不是很好。</p>\n<h1 id=\"Margin-auto-居中\"><a href=\"#Margin-auto-居中\" class=\"headerlink\" title=\"Margin:auto 居中\"></a>Margin:auto 居中</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>:red;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"comment\">/***居中***/</span></div><div class=\"line\">    <span class=\"attribute\">text-align</span>:center;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin</span>:auto;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2><p><a href=\"http://www.zhangxinxu.com/wordpress/2013/11/margin-auto-absolute-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/\" target=\"_blank\" rel=\"external\">margin:auto实现元素居中原理</a></p>\n<h1 id=\"弹性盒子居中-fixed\"><a href=\"#弹性盒子居中-fixed\" class=\"headerlink\" title=\"弹性盒子居中(fixed)\"></a>弹性盒子居中(fixed)</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"comment\">/*居中*/</span></div><div class=\"line\">    <span class=\"attribute\">display</span>:flex;</div><div class=\"line\">    <span class=\"attribute\">flex-direction</span>:column;</div><div class=\"line\">    <span class=\"attribute\">align-items</span>:center;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>:center;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>:red;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>:center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现上述的垂直居中完全是根据Fiex的布局的强大功能。</p>\n<h2 id=\"Fiex扫盲\"><a href=\"#Fiex扫盲\" class=\"headerlink\" title=\"Fiex扫盲\"></a>Fiex扫盲</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">认识Fiex</a></p>\n<h1 id=\"利用inline-block居中\"><a href=\"#利用inline-block居中\" class=\"headerlink\" title=\"利用inline-block居中\"></a>利用inline-block居中</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//index.html</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">htm</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"extendCss.css\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Css元素居中解决方案<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span> </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--利用一个空元素来使\"居中\"元素实现居中效果--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">htm</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>对应的css文档<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.middle</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">500px</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    <span class=\"comment\">/*横向居中*/</span></div><div class=\"line\">    <span class=\"attribute\">text-align</span>:center;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>:center;</div><div class=\"line\">    <span class=\"attribute\">display</span>:inline-block;</div><div class=\"line\">    <span class=\"comment\">/*纵向居中*/</span></div><div class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">        <span class=\"attribute\">background</span>:red;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"selector-class\">.middle</span>&gt;<span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:nth-child(2)</span>&#123;</div><div class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">        <span class=\"attribute\">width</span>:<span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"实现原理解析\"><a href=\"#实现原理解析\" class=\"headerlink\" title=\"实现原理解析\"></a>实现原理解析</h2><ol>\n<li>首先在父元素中利用text-align将子元素进行<strong>水平居中</strong></li>\n<li>在需要<em>居中</em>的元素中<strong>display</strong>定为inline-block,使多个元素在一行中并排显示,同时利用<strong>vertical-align</strong>将元素进行<strong>垂直居中</strong></li>\n<li>利用<strong>伪类</strong>来处理元素定义一些样式</li>\n<li>该实例中最重要的部分就是利用<strong>nth-child</strong>来对需要居中的元素进行影响，需要有一个元素来撑起整个父元素，而这个任务就交个了<strong>nth-child</strong>定位的<strong>辅助</strong>元素，让其height撑起父元素全部，这样使得需要定位的元素随着<strong>辅助元素</strong>的height利用<strong>vertical-align</strong>变成居中效果。</li>\n</ol>\n","comments":true,"categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"let 和 const","date":"2017-12-21T14:37:53.000Z","path":"2017/12/21/First-Head-ES6/","content":"<hr>\n<h1 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h1><h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>ES6新增了用于声明变量的let命令，用法类似于var，但是用let声明的变量只能在let所在的<strong>代码块</strong>内有效。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"string\">'paramA'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> b = <span class=\"string\">'paramB'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">a <span class=\"comment\">// ReferenceError :a is not defined</span></div><div class=\"line\">b <span class=\"comment\">// paramB</span></div></pre></td></tr></table></figure></p>\n<p>这里有一个很有意思的bug，需要着重讨论一下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    a[i]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 10</span></div></pre></td></tr></table></figure></p>\n<p>这个输出结果很意外，很多人以为会是输出6，但是在浏览器的控制台的结果却是10。很诧异。<br>我们来扮演一下浏览器的处理过程。<br>首先我们需要确定一个概念就是用var定义的变量会发生<strong>变量提升</strong>，也就是说在for循环中定义的i经过变量提升，提示到代码的最前面，等同于在整个for循环中仅仅存在一份i变量。</p>\n<ol>\n<li>每次for处理，唯一的i值会发生相应的变化。</li>\n<li>在for结束之后，i的值已经变为10</li>\n<li>调用a<a href=\"\">6</a>的时候，其实是在堆内存中找出对应的console.log(i),此时在该匿名函数查找栈内存中的i变量，发现i的值是10，所以没有商量</li>\n<li>最后的输出结果为10</li>\n</ol>\n<p>如果在for中采用let来定义<strong>游标</strong>(循环变量)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    a[i]=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">a[<span class=\"number\">6</span>](); <span class=\"comment\">// 6</span></div></pre></td></tr></table></figure></p>\n<p>此时的结果就是6了。<br>其实不管是在for中用var或者let定义，内部都涉及到闭包。<br>这里以let的来解析一下。<br>首先需要明确的一点，console.log是ECMAScript中的内置函数。</p>\n<ol>\n<li>for处理，let定义的<strong>游标</strong>也是会发生变化，但是需要记住，用let定义的变量只在对应的<strong>代码块</strong>中有效，所以每一次的let都是<strong>新的</strong>。</li>\n<li>for结束</li>\n<li>调用a<a href=\"\">6</a>,由于闭包存在作用域链，在console.log(i)被调用后，匿名函数会在该函数对应作用域链中查找栈内存中的对应的i变量。由1所知，i在每一次循环中都是<strong>新的</strong>。</li>\n<li>输出结果是6</li>\n</ol>\n<h2 id=\"不存在变量提升\"><a href=\"#不存在变量提升\" class=\"headerlink\" title=\"不存在变量提升\"></a>不存在变量提升</h2><p>let不存在变量提升，所以，<strong>变量一定要在声明后使用</strong><br>原来使用var定义变量的时候，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(paramA);</div><div class=\"line\"><span class=\"keyword\">var</span> paramA = <span class=\"string\">'hehe'</span>;</div></pre></td></tr></table></figure></p>\n<p>上面代码是能够运行成功的，之所以能够通过编译。是由于在编译器对上述代码会在编译阶段就行调整<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> paramA;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(paramA);</div><div class=\"line\">paramA = <span class=\"string\">'hehe'</span>;</div></pre></td></tr></table></figure></p>\n<p>但是现在用let定义的变量不会发生<strong>变量提升</strong>所以下面的代码就会报错<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(paramB); <span class=\"comment\">// ReferenceError</span></div><div class=\"line\"><span class=\"keyword\">let</span> paramB = <span class=\"string\">'haha'</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"暂时性死区-temporal-dead-zone-TDZ\"><a href=\"#暂时性死区-temporal-dead-zone-TDZ\" class=\"headerlink\" title=\"暂时性死区(temporal dead zone TDZ)\"></a>暂时性死区(temporal dead zone TDZ)</h2><p>只要<strong>块级作用域</strong>内存在let命令，它所声明的变量就<em>绑定</em>这个区域，不再受外部影响。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> temp = <span class=\"number\">123</span>;</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(temp);<span class=\"comment\">// ReferenceError</span></div><div class=\"line\">    temp = <span class=\"string\">'hehe'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>ES6明确规定，如果在区块中存在let和const命令，则这个区块对这些命令声明的变量从一开始就形成<strong>封闭作用域</strong>，只要在声明之前使用这些变量，就会报错。</p>\n</blockquote>\n<p><strong>总之，TDZ的本质就是，只要一进入当前作用域，所要使用的变量就已存在，但是不可以获取，只有等到声明变量的那行代码出现，才可以获取和使用该变量</strong></p>\n<h2 id=\"不允许重复声明\"><a href=\"#不允许重复声明\" class=\"headerlink\" title=\"不允许重复声明\"></a>不允许重复声明</h2><p>let不允许在相同作用域内重复声明同一变量。(这个是规定)<br>这个是为了区分ES5中用var定义变量，用var定义的变量可以重复定义，变量最后的值，是以最后定义的为准</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> a =<span class=\"string\">'b'</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a);<span class=\"comment\">// b</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 报错</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> a =<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个规则中，有一点需要注意：<br><strong>不能在函数内部重新声明参数</strong></p>\n<h1 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h1><p>ES5只有<strong>全局作用域</strong>和<strong>函数作用域</strong>，没有块级作用。<br>这里就会产生很多意外的bug。</p>\n<ul>\n<li>内层变量覆盖外层变量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(tmp);</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> tmp = <span class=\"string\">\"hehe\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">f() <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n<p>由于在函数作用域中tmp发生了变量提示，在<strong>编译阶段</strong>提升到函数作用域的最前面，然后log(tmp)。由于tmp被提升到函数作用域的最前面，所以在log的时候，此时tmp的值是被提升的值，而不是全局作用域中定义的变量。</p>\n<ul>\n<li>用来技术的循环变量泄露为全局变量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; s.length;i++)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(i)<span class=\"comment\">// 5</span></div></pre></td></tr></table></figure>\n<p>然而ES6为了避免这些不必要的bug，新增了块级作用域</p>\n<h1 id=\"const-命令\"><a href=\"#const-命令\" class=\"headerlink\" title=\"const 命令\"></a>const 命令</h1><p>const 用于声明<strong>常量</strong>。一旦声明，其值就不能改变。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> PI = <span class=\"number\">3.14</span>;</div><div class=\"line\">PI <span class=\"comment\">//3.14</span></div><div class=\"line\">PI = <span class=\"number\">3</span>; <span class=\"comment\">//TypeError :'PI' is read-only</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>const声明的常量不得改变值，也就是说，const一旦声明常量，就必须<strong>立即初始化</strong>。const 声明的变量也不会发生变量提升，同时存在TDZ.</p>\n</blockquote>\n<hr>\n<p>对于符合类型的变量，例如对象，变量名不指向数据，而是指向数据所在的地址。const命令只是保证变量名指向的地址不变，并不保证该地址的数据不变。</p>\n<hr>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实ES6之所以会新增let、const命令主要是为了避免ES5使用var定义变量的各种稀奇古怪的问题。</p>\n","comments":true,"categories":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/categories/ES6/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://yoursite.com/tags/ES6/"}]},{"title":"初识CSS","date":"2017-12-21T14:02:09.000Z","path":"2017/12/21/First-Head-CSS/","content":"<hr>\n<h1 id=\"What-is-CSS\"><a href=\"#What-is-CSS\" class=\"headerlink\" title=\"What is CSS\"></a>What is CSS</h1><ul>\n<li>CSS是Cascading Style Sheets(层叠样式表的简称)。</li>\n<li>CSS主要是为了描述HTML Element如何在Web页面展示。</li>\n<li>CSS节省了很多工作，它能够在一个地方来控制多个页面的布局格式。</li>\n</ul>\n<h1 id=\"Why-Use-CSS\"><a href=\"#Why-Use-CSS\" class=\"headerlink\" title=\"Why Use CSS\"></a>Why Use CSS</h1><p>CSS是为了网页定义布局、样式使网页能够适配不同设备和屏幕大小。</p>\n<h1 id=\"CSS解决的痛点\"><a href=\"#CSS解决的痛点\" class=\"headerlink\" title=\"CSS解决的痛点\"></a>CSS解决的痛点</h1><p>对于HTML来说，利用标签(tag)来对网页进行格式化，不是它的本职工作。HTML是用来描绘页面布局的，是Web page的骨架。而真正对网页进行format的事就交个CSS了。</p>\n<blockquote>\n<p>可以这样认为HTML构建了Web page的<strong>骨架</strong>，CSS对骨架进行<strong>修饰</strong>。</p>\n</blockquote>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>CSS其实就是对网页进行粉饰的<strong>粉刷匠</strong>。</p>\n","comments":true,"categories":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"React概述","date":"2017-12-21T08:02:34.000Z","path":"2017/12/21/First-Head-React/","content":"<hr>\n<h1 id=\"JavaScript-library-JS工具库\"><a href=\"#JavaScript-library-JS工具库\" class=\"headerlink\" title=\"JavaScript library(JS工具库)\"></a>JavaScript library(JS工具库)</h1><blockquote>\n<p>React是利用JS来构建UI界面的工具库。</p>\n</blockquote>\n<h2 id=\"Declarative\"><a href=\"#Declarative\" class=\"headerlink\" title=\"Declarative\"></a>Declarative</h2><blockquote>\n<p>Declarative Programming :也就是业界经常说的声明式编程。声明式编程的定义：如果一个程序只是描述了某事而不是如何生成，那么就是表述性的。例如HTML是表述性的，因为只是描述了网页中含有了什么，而不是如何在一个计算机屏幕上实际显示。</p>\n</blockquote>\n<p>下面的例子是用React写的实例代码，可以看到对于React来构建页面其实是和HTML构建页面是一样的，只是单纯的来堆积页面中用的Element。只是针对于React来说，Element创建之后，是被挂载在Virtual DOM上的，在之后的某一个时段才会被真正挂载在真实DOM上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameForm</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">     <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">value</span>: <span class=\"string\">''</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.handleChange = <span class=\"keyword\">this</span>.handleChange.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.handleSubmit = <span class=\"keyword\">this</span>.handleSubmit.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleChange(event) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">value</span>: event.target.value&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handleSubmit(event) &#123;</div><div class=\"line\">    alert(<span class=\"string\">'A name was submitted: '</span> + <span class=\"keyword\">this</span>.state.value);</div><div class=\"line\">    event.preventDefault();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;form onSubmit=&#123;<span class=\"keyword\">this</span>.handleSubmit&#125;&gt;</div><div class=\"line\">        &lt;label&gt;</div><div class=\"line\">          Name:</div><div class=\"line\">          &lt;input type=<span class=\"string\">\"text\"</span> value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.handleChange&#125; /&gt;</div><div class=\"line\">        &lt;<span class=\"regexp\">/label&gt;</span></div><div class=\"line\"><span class=\"regexp\">        &lt;input type=\"submit\" value=\"Submit\" /</span>&gt;</div><div class=\"line\">      &lt;<span class=\"regexp\">/form&gt;</span></div><div class=\"line\"><span class=\"regexp\">    );</span></div><div class=\"line\"><span class=\"regexp\">  &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Component-Based\"><a href=\"#Component-Based\" class=\"headerlink\" title=\"Component-Based\"></a>Component-Based</h2><p>可以这样认为用React来构建UI界面的时候，类似于搭<em>积木</em>，而这些<em>积木</em>从React角度来将，就是所谓的<strong>组件</strong>。<br>可以这样说React页面都是用组件来堆积起来的。这样做的好处就是实现组件的<strong>共用</strong>。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//CommonA.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                我是一个萌萌哒的汉子！</div><div class=\"line\">            &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">        )</span></div><div class=\"line\"><span class=\"regexp\">    &#125;</span></div><div class=\"line\"><span class=\"regexp\">&#125;</span></div><div class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/CommonB.js</span></div><div class=\"line\"><span class=\"regexp\">export default class CommonB extends React.Component&#123;</span></div><div class=\"line\"><span class=\"regexp\">    constructor(props,context)&#123;</span></div><div class=\"line\"><span class=\"regexp\">        super(props,context)</span></div><div class=\"line\"><span class=\"regexp\">    &#125;</span></div><div class=\"line\"><span class=\"regexp\">    render()&#123;</span></div><div class=\"line\"><span class=\"regexp\">        return(</span></div><div class=\"line\"><span class=\"regexp\">            &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                我是另一个汉子！</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//BusinessModuleA.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> CommonA <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> CommonB <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessModuleA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonB/&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                    &lt;CommonB/</span>&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Learn-Once-Write-Anywhere\"><a href=\"#Learn-Once-Write-Anywhere\" class=\"headerlink\" title=\"Learn Once, Write Anywhere\"></a>Learn Once, Write Anywhere</h2><p>利用React开发页面还有一个好处就是，无论你现在正在使用什么技术栈，你都可以随时引入 React 开发新特性。<br>例如，你现在用原生的HTML进行页面的构建，现在想在某一个页面或者页面的一部分使用React。React能够无缝接入。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"reactModule.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        我是用原生写的Element哦！</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"extendElement\"</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- This element's contents will be replaced with your component. --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//reactModule.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> CommonA <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> CommonB <span class=\"keyword\">from</span> <span class=\"string\">'CommonA'</span>;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BusinessModuleA</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</div><div class=\"line\">     <span class=\"keyword\">constructor</span>(props,context)&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(props,context)</div><div class=\"line\">    &#125;</div><div class=\"line\">    render()&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonA/&gt;</div><div class=\"line\">                    &lt;CommonB/&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                &lt;div&gt;</span></div><div class=\"line\"><span class=\"regexp\">                    &lt;CommonB/</span>&gt;</div><div class=\"line\">                &lt;<span class=\"regexp\">/div&gt;</span></div><div class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;BusinessModuleA /&gt;,</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'extendElement'</span>)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>如上代码所示，就将React构建的页面融合到原有项目中。</p>\n","comments":true,"categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"初识JS","date":"2017-12-20T07:13:01.000Z","path":"2017/12/20/First-Head-JS/","content":"<hr>\n<h1 id=\"JavaScrpit的三大部分\"><a href=\"#JavaScrpit的三大部分\" class=\"headerlink\" title=\"JavaScrpit的三大部分\"></a>JavaScrpit的三大部分</h1><p>需要特别注意的是JS≠ECMAScript<br>这里就需要明确的讨论一下JS的组成部分了。<br>JS=ECMAScript(核心)+DOM(文档对象模型)+BOM(浏览器对象模型)</p>\n<h2 id=\"ECMAScript-JS核心\"><a href=\"#ECMAScript-JS核心\" class=\"headerlink\" title=\"ECMAScript(JS核心)\"></a>ECMAScript(JS核心)</h2><p>ECMAScript规定或者说是定义了如下内容</p>\n<ul>\n<li>语法</li>\n<li>类型</li>\n<li>语句</li>\n<li>关键字</li>\n<li>保留字</li>\n<li>操作符</li>\n<li>对象</li>\n</ul>\n<p><em>这里需要明确一点</em><br>ECMAScript-262定义的ECMAScript和Web浏览器没有任何依赖关系，ECMAScript并不包含输入、输出定义。我们所说的Web浏览器只是ECMAScript实现的<strong>宿主环境</strong>之一。</p>\n<blockquote>\n<p>宿主环境&gt;不仅提供基本的ECMAScript的实现，同时也会提供ECMAScript的扩展，以便语言和宿主环境进行对接及交互。就针对Web浏览器而言，DOM利用ECMAScript所提供的核心类型和语法提供更多的功能，以便实现<strong>针对</strong>特定宿主环境的操作。</p>\n</blockquote>\n<h2 id=\"DOM-文档对象类型\"><a href=\"#DOM-文档对象类型\" class=\"headerlink\" title=\"DOM(文档对象类型)\"></a>DOM(文档对象类型)</h2><blockquote>\n<p>DOM&gt;是针对HTML和XML文档的一个API。DOM将整个页面<em>映射</em>一个层次化的<strong>节点树</strong>，允许开发人员对页面进行CURD。</p>\n</blockquote>\n<h3 id=\"DOM级别\"><a href=\"#DOM级别\" class=\"headerlink\" title=\"DOM级别\"></a>DOM级别</h3><p>由于浏览器的发展，对DOM也不断的进行扩展，所以在不同的阶段，产生向上兼容的DOM版本。</p>\n<h4 id=\"DOM1级\"><a href=\"#DOM1级\" class=\"headerlink\" title=\"DOM1级\"></a>DOM1级</h4><p>DOM1级由两部分构成</p>\n<ol>\n<li><p>DOM Core(DOM 核心)</p>\n<blockquote>\n<p>DOM Core &gt;规定如何<strong>映射</strong>基于XML的文档机构，以便简化对文档中<em>任意</em>部分的访问和操作。</p>\n</blockquote>\n</li>\n<li><p>DOM HTML</p>\n<blockquote>\n<p>DOM HTML &gt; 在DOM Core的基础上加以<strong>扩展</strong>，添加了针对HTML的对象和方法。</p>\n</blockquote>\n</li>\n</ol>\n<p>DOM1目标主要是映射文档的结构。</p>\n<h4 id=\"DOM2级\"><a href=\"#DOM2级\" class=\"headerlink\" title=\"DOM2级\"></a>DOM2级</h4><p>DOM2级在原来DOM1级的基础上又扩充了鼠标和用户界面事件、范围、迭代DOM文档的方法等模块。同时通过<strong>对象接口</strong>增加了对CSS的支持。<br>DOM2引入下列新模块</p>\n<ol>\n<li>DOM Views(DOM视图) :定义了跟踪不同文档视图的接口；</li>\n<li>DOM Event(DOM事件) :定义了事件和事件处理的接口；</li>\n<li>DOM Style(DOM样式) ：定义了基于CSS为元素应用样式的接口；</li>\n<li>DOM Traversal and Range(DOM遍历和范围)：定义了遍历和操作文档树的接口；</li>\n</ol>\n<h4 id=\"DOM3级\"><a href=\"#DOM3级\" class=\"headerlink\" title=\"DOM3级\"></a>DOM3级</h4><p>DOM3级引入下列新模块</p>\n<ol>\n<li>DOM Load and Save(DOM加载和保存):以统一方式加载和保存文档的方法；</li>\n<li>DOM Validation(DOM验证):验证文档的方法</li>\n</ol>\n<h2 id=\"BOM-浏览器对象模型\"><a href=\"#BOM-浏览器对象模型\" class=\"headerlink\" title=\"BOM(浏览器对象模型)\"></a>BOM(浏览器对象模型)</h2><p>开发人员使用BOM可以控制浏览器显示的页面以外的部分。<br><em>从根本上讲，BOM只处理浏览器窗口和框架。</em>但是开发人员也把所有针对浏览器的JS扩展算作BOM的一部分。</p>\n<ul>\n<li>弹窗新浏览器窗口的功能；</li>\n<li>移动、缩放和关闭浏览器窗功能；</li>\n<li>提供浏览器详细信息的navigator对象；</li>\n<li>提供浏览器所加载页面的详细信息的location对象；</li>\n<li>提供用户显示器分辨率详细信息的screen对象；</li>\n<li>对cookies的支持</li>\n<li>像XMLHttpRequest自定义对象。</li>\n</ul>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实可以用一道菜来形容JS中ECMAScript、DOM、BOM的关系</p>\n<blockquote>\n<p>宫保鸡丁(web page)的做法<br>预备材料：鸡肉(html or xml)、佐料(css)<br>主厨：JS<br>主厨(JS)利用手中的刀(DOM){该刀不仅仅切鸡肉}将鸡肉切成块状(web page object/API),利用自己娴熟的技术(ECMAScirpt)<br>针对不同的种类的鸡块(API)配合佐料(css)和火候(BOM)产生的温度(browser object/API{XMLHTTPRequest对象，location对象})烹饪出可口的page。</p>\n</blockquote>\n","comments":false,"categories":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/categories/JS/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]}]