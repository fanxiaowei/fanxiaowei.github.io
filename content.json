[{"title":"初识JS","date":"2017-12-20T07:13:01.000Z","path":"2017/12/20/First-Head-JS/","content":"<hr>\n<h1 id=\"JavaScrpit的三大部分\"><a href=\"#JavaScrpit的三大部分\" class=\"headerlink\" title=\"JavaScrpit的三大部分\"></a>JavaScrpit的三大部分</h1><p>需要特别注意的是JS≠ECMAScript<br>这里就需要明确的讨论一下JS的组成部分了。<br>JS=ECMAScript(核心)+DOM(文档对象模型)+BOM(浏览器对象模型)</p>\n<h2 id=\"ECMAScript-JS核心\"><a href=\"#ECMAScript-JS核心\" class=\"headerlink\" title=\"ECMAScript(JS核心)\"></a>ECMAScript(JS核心)</h2><p>ECMAScript规定或者说是定义了如下内容</p>\n<ul>\n<li>语法</li>\n<li>类型</li>\n<li>语句</li>\n<li>关键字</li>\n<li>保留字</li>\n<li>操作符</li>\n<li>对象</li>\n</ul>\n<p><em>这里需要明确一点</em><br>ECMAScript-262定义的ECMAScript和Web浏览器没有任何依赖关系，ECMAScript并不包含输入、输出定义。我们所说的Web浏览器只是ECMAScript实现的<strong>宿主环境</strong>之一。</p>\n<blockquote>\n<p>宿主环境&gt;不仅提供基本的ECMAScript的实现，同时也会提供ECMAScript的扩展，以便语言和宿主环境进行对接及交互。就针对Web浏览器而言，DOM利用ECMAScript所提供的核心类型和语法提供更多的功能，以便实现<strong>针对</strong>特定宿主环境的操作。</p>\n</blockquote>\n<h2 id=\"DOM-文档对象类型\"><a href=\"#DOM-文档对象类型\" class=\"headerlink\" title=\"DOM(文档对象类型)\"></a>DOM(文档对象类型)</h2><blockquote>\n<p>DOM&gt;是针对HTML和XML文档的一个API。DOM将整个页面<em>映射</em>一个层次化的<strong>节点树</strong>，允许开发人员对页面进行CURD。</p>\n</blockquote>\n<h3 id=\"DOM级别\"><a href=\"#DOM级别\" class=\"headerlink\" title=\"DOM级别\"></a>DOM级别</h3><p>由于浏览器的发展，对DOM也不断的进行扩展，所以在不同的阶段，产生向上兼容的DOM版本。</p>\n<h4 id=\"DOM1级\"><a href=\"#DOM1级\" class=\"headerlink\" title=\"DOM1级\"></a>DOM1级</h4><p>DOM1级由两部分构成</p>\n<ol>\n<li><p>DOM Core(DOM 核心)</p>\n<blockquote>\n<p>DOM Core &gt;规定如何<strong>映射</strong>基于XML的文档机构，以便简化对文档中<em>任意</em>部分的访问和操作。</p>\n</blockquote>\n</li>\n<li><p>DOM HTML</p>\n<blockquote>\n<p>DOM HTML &gt; 在DOM Core的基础上加以<strong>扩展</strong>，添加了针对HTML的对象和方法。</p>\n</blockquote>\n</li>\n</ol>\n<p>DOM1目标主要是映射文档的结构。</p>\n<h4 id=\"DOM2级\"><a href=\"#DOM2级\" class=\"headerlink\" title=\"DOM2级\"></a>DOM2级</h4><p>DOM2级在原来DOM1级的基础上又扩充了鼠标和用户界面事件、范围、迭代DOM文档的方法等模块。同时通过<strong>对象接口</strong>增加了对CSS的支持。<br>DOM2引入下列新模块</p>\n<ol>\n<li>DOM Views(DOM视图) :定义了跟踪不同文档视图的接口；</li>\n<li>DOM Event(DOM事件) :定义了事件和事件处理的接口；</li>\n<li>DOM Style(DOM样式) ：定义了基于CSS为元素应用样式的接口；</li>\n<li>DOM Traversal and Range(DOM遍历和范围)：定义了遍历和操作文档树的接口；</li>\n</ol>\n<h4 id=\"DOM3级\"><a href=\"#DOM3级\" class=\"headerlink\" title=\"DOM3级\"></a>DOM3级</h4><p>DOM3级引入下列新模块</p>\n<ol>\n<li>DOM Load and Save(DOM加载和保存):以统一方式加载和保存文档的方法；</li>\n<li>DOM Validation(DOM验证):验证文档的方法</li>\n</ol>\n<h2 id=\"BOM-浏览器对象模型\"><a href=\"#BOM-浏览器对象模型\" class=\"headerlink\" title=\"BOM(浏览器对象模型)\"></a>BOM(浏览器对象模型)</h2><p>开发人员使用BOM可以控制浏览器显示的页面以外的部分。<br><em>从根本上讲，BOM只处理浏览器窗口和框架。</em>但是开发人员也把所有针对浏览器的JS扩展算作BOM的一部分。</p>\n<ul>\n<li>弹窗新浏览器窗口的功能；</li>\n<li>移动、缩放和关闭浏览器窗功能；</li>\n<li>提供浏览器详细信息的navigator对象；</li>\n<li>提供浏览器所加载页面的详细信息的location对象；</li>\n<li>提供用户显示器分辨率详细信息的screen对象；</li>\n<li>对cookies的支持</li>\n<li>像XMLHttpRequest自定义对象。</li>\n</ul>\n<h1 id=\"Buzzer\"><a href=\"#Buzzer\" class=\"headerlink\" title=\"Buzzer\"></a>Buzzer</h1><p>其实可以用一道菜来形容JS中ECMAScript、DOM、BOM的关系</p>\n<blockquote>\n<p>宫保鸡丁(web page)的做法<br>预备材料：鸡肉(html or xml)、佐料(css)<br>主厨：JS<br>主厨(JS)利用手中的刀(DOM){该刀不仅仅切鸡肉}将鸡肉切成块状(web page object/API),利用自己娴熟的技术(ECMAScirpt)<br>针对不同的种类的鸡块(API)配合佐料(css)和火候(BOM)产生的温度(browser object/API{XMLHTTPRequest对象，location对象})烹饪出可口的page。</p>\n</blockquote>\n","comments":false,"categories":[{"name":"js","slug":"js","permalink":"http://yoursite.com/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"http://yoursite.com/tags/js/"}]}]